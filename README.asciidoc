= Storage-Units
Sebastian Hoß <https://github.com/sebhoss[@sebhoss]>
:github-org: sebhoss
:project-name: storage-units
:project-group: com.github.sebhoss
:coverity-project: 2658
:toc:
:toc-placement: preamble

image:https://img.shields.io/maven-central/v/{project-group}/{project-name}.svg?style=flat-square["Maven Central", link="https://maven-badges.herokuapp.com/maven-central/{project-group}/{project-name}"]
image:https://www.openhub.net/p/{project-name}/widgets/project_thin_badge.gif["Open Hub statistics", link="https://www.ohloh.net/p/{project-name}"]
image:https://img.shields.io/travis/{github-org}/{project-name}/master.svg?style=flat-square["Build Status", link="https://travis-ci.org/{github-org}/{project-name}"]
image:https://img.shields.io/coveralls/{github-org}/{project-name}/master.svg?style=flat-square["", link="https://coveralls.io/github/{github-org}/{project-name}"]
image:https://scan.coverity.com/projects/{coverity-project}/badge.svg["Coverity Scan Result", link="https://scan.coverity.com/projects/{coverity-project}"]
image:https://badges.gitter.im/Join%20Chat.svg["Gitter", link="https://gitter.im/{github-org}/{project-name}"]

Implementation of storage units according to link:http://en.wikipedia.org/wiki/ISO/IEC_80000[ISO IEC 80000-13:2008].

=== Features

* Type safe object model for storage units
* Factories to create those objects
* Basic math operators
* Comparisons and equality
* Lossless conversion between all units
* Human readable text format

==== Available Units

.Binary-based units
|===
| Name | Symbol | Exponential | Absolute

| Kibibyte
| KiB
| 2 ^10^ Byte
| 1 024 Byte

| Mebibyte
| MiB
| 2 ^20^ Byte
| 1 048 576 Byte

| Gibibyte
| GiB
| 2 ^30^ Byte
| 1 073 741 824 Byte

| Tebibyte
| TiB
| 2 ^40^ Byte
| 1 099 511 627 776 Byte

| Pebibyte
| PiB
| 2 ^50^ Byte
| 1 125 899 906 842 624 Byte

| Exbibyte
| EiB
| 2 ^60^ Byte
| 1 152 921 504 606 846 976 Byte

| Zebibyte
| ZiB
| 2 ^70^ Byte
| 1 180 591 620 717 411 303 424 Byte

| Yobibyte
| YiB
| 2 ^80^ Byte
| 1 208 925 819 614 629 174 706 176 Byte
|===

.Metric-based units
|===
| Name | Symbol | Exponential | Absolute

| Kilobyte
| kB
| 10 ^3^ Byte
| 1 000 Byte

| Megabyte
| MB
| 10 ^6^ Byte
| 1 000 000 Byte

| Gigabyte
| GB
| 10 ^9^ Byte
| 1 000 000 000 Byte

| Terabyte
| TB
| 10 ^12^ Byte
| 1 000 000 000 000 Byte

| Petabyte
| PB
| 10 ^15^ Byte
| 1 000 000 000 000 000 Byte

| Exabyte
| EB
| 10 ^18^ Byte
| 1 000 000 000 000 000 000 Byte

| Zettabyte
| ZB
| 10 ^21^ Byte
| 1 000 000 000 000 000 000 000 Byte

| Yottabyte
| YB
| 10 ^24^ Byte
| 1 000 000 000 000 000 000 000 000 Byte
|===

=== Development Status

All units according to ISO IEC 80000-13:2008 are implemented. This project is in maintenance mode.


== Usage

=== Factories

Each unit implements a Byte-based static factory method (`valueOf(BigInteger)` or `valueOf(long)`) that can be used to represent a given number of bytes in a specific unit.

[source,java]
----
// 'long' based
Kilobyte unit = Kilobyte.valueOf(2500)    // 2 500 Byte or "2.50 kB"
Kibibyte unit = Kibibyte.valueOf(512)     // 512 Byte or "0.50 KiB"
Megabyte unit = Megabyte.valueOf(1000000) // 1 000 000 Byte or "1.00 MB"

// 'BigInteger' based
Kilobyte unit = Kilobyte.valueOf(BigInteger.valueOf(2500))    // 2 500 Byte or "2.50 kB"
Kibibyte unit = Kibibyte.valueOf(BigInteger.valueOf(512))     // 512 Byte or "0.50 KiB"
Megabyte unit = Megabyte.valueOf(BigInteger.valueOf(1000000)) // 1 000 000 Byte or "1.00 MB"
----

The `StorageUnits` class offers two factory methods that automatically pick the best-matching unit for a given number of bytes.

[source,java]
----
// 'long' based
StorageUnit<?> unit = StorageUnits.binaryValueOf(256)       // Kibibyte (0.25 KiB)
StorageUnit<?> unit = StorageUnits.binaryValueOf(1048576)   // Mebibyte (1.00 MiB)

// 'BigInteger' based
StorageUnit<?> unit = StorageUnits.binaryValueOf(BigInteger.valueOf(256))     // Kibibyte (1.00 MiB)
StorageUnit<?> unit = StorageUnits.binaryValueOf(BigInteger.valueOf(1048576)) // Mebibyte (1.00 MiB)
----

[source,java]
----
// 'long' based
StorageUnit<?> unit = StorageUnits.metricValueOf(120000)    // Kilobyte (120.00 kB)
StorageUnit<?> unit = StorageUnits.metricValueOf(1000000)   // Megabyte (1.00 MB)

// 'BigInteger' based
StorageUnit<?> unit = StorageUnits.metricValueOf(BigInteger.valueOf(120000))    // Kilobyte (120.00 kB)
StorageUnit<?> unit = StorageUnits.metricValueOf(BigInteger.valueOf(1000000))   // Megabyte (1.00 MB)
----

Additionally high-level factory methods are also available in the `StorageUnits` class.

[source,java]
----
Megabyte unit = StorageUnits.megabyte(1) // 1 000 000 Byte
Kibibyte unit = StorageUnits.kibibyte(8) // 8 192 Byte
Gigabyte unit = StorageUnits.gigabyte(2) // 2 000 000 000 Byte
----

=== Add, Subtract, Multiply, Divide

Each unit implements the basic four math operations.

[source,java]
----
kilobyte(4).add(kilobyte(8))        // 4 Kilobyte + 8 Kilobyte = 12 Kilobyte = 12 000 Byte
kibibyte(1).add(1024)               // 1 Kibibyte + 1 024 Byte = 2 Kibibyte = 2 048 Byte
kibibyte(1).subtract(24)            // 1 024 Byte - 24 Byte = 1 000 Byte
megabyte(5).subtract(kilobyte(500)) // 5 Megabyte - 500 Kilobyte = 4.5 Megabyte = 4 500 Kilobyte = 4 500 000 Byte
gigabyte(1).multiply(5)             // 1 Gigabyte times 5 = 5 Gigabyte
terabyte(1).divide(5)               // 1 Terabyte divided by 5 = 0.2 Terabyte = 200 Gigabyte
----

=== compareTo

Each unit is comparable to each other unit.

[source,java]
----
kibibyte(1024).compareTo(mebibyte(1)) == 0 // true
kibibyte(1000).compareTo(mebibyte(1)) == 0 // false
petabyte(3).compareTo(terabyte(3000)) == 0 // true
----

=== equals

Each unit can be checked against each other unit.

[source,java]
----
megabyte(1000).equals(gigabyte(1)) // true
megabyte(1024).equals(gigabyte(1)) // false
terabyte(12).equals(gigabyte(12000))  // false
----

=== toString

Each unit prints a human-readable string, representing the amount of bytes in the given unit using the symbol specified in ISO IEC 80000-13:2008.

[source,java]
----
terabyte(2).toString()                         // "2.00 TB"
gigabyte(1).add(megabyte(200)).toString()      // "1.20 GB"
petabyte(1).subtract(terabyte(250)).toString() // "0.75 PB"
----

=== Conversions

Each unit can be converted to each other unit.

[source,java]
----
Megabyte unit = kilobyte(1000).asMegabyte() // "1.00 MB"
Kilobyte unit = gigabyte(12).asKilobyte()   // "12000000.00 kB"
Gigabyte unit = terabyte(1).asGigabyte()    // "1000.00 GB"
----

Each unit can be expressed as a fraction of another unit.

[source,java]
----
BigDecimal kilobytes = megabyte(1).inKilobyte() // 1 000
BigDecimal bytes = kibibyte(2).inByte()         // 2 048
BigDecimal terabytes = gigabyte(15).inTerabyte()   // 0.015
----

=== Integration

To use this project just declare the following dependency inside your POM:

[source,xml,subs="attributes,verbatim"]
----
<dependencies>
  <dependency>
    <groupId>{project-group}</groupId>
    <artifactId>{project-name}</artifactId>
    <version>${version.storage-units}</version>
  </dependency>
</dependencies>
----

Replace `${version.storage-units}` with the link:http://search.maven.org/#search%7Cga%7C1%7Cg%3A{project-group}%20a%3A{project-name}[latest release]. This project follows the link:http://semver.org/[semantic versioning guidelines].

=== Compatibility

This project is compatible with the following Java versions:

.Java compatibility
|===
| | 1.X.Y | 2.X.Y

| Java 8
| ✓
| ✓

| Java 7
| ✓
| 
|===

== Reference

Originally inspired by link:https://github.com/twitter/util#space[Twitters util] package.

== License

This project is licensed under the link:http://unlicense.org/[UNLICENSE]. See the link:UNLICENSE[UNLICENSE file] for more information.
